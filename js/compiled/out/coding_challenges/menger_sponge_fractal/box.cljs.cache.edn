{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.menger-sponge-fractal.box, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {make {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\menger-sponge-fractal\\box.cljs", :line 4, :column 7, :end-line 4, :end-column 11, :arglists (quote ([x y z r]))}, :name coding-challenges.menger-sponge-fractal.box/make, :variadic false, :file "src\\cljs\\coding_challenges\\menger-sponge-fractal\\box.cljs", :end-column 11, :method-params ([x y z r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y z r]))}, generate {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\menger-sponge-fractal\\box.cljs", :line 10, :column 7, :end-line 10, :end-column 15, :arglists (quote ([{r :r, {x :x, y :y, z :z} :pos, :as box}]))}, :name coding-challenges.menger-sponge-fractal.box/generate, :variadic false, :file "src\\cljs\\coding_challenges\\menger-sponge-fractal\\box.cljs", :end-column 15, :method-params ([p__35483]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{r :r, {x :x, y :y, z :z} :pos, :as box}]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\menger-sponge-fractal\\box.cljs", :line 26, :column 7, :end-line 26, :end-column 11, :arglists (quote ([{r :r, {x :x, y :y, z :z} :pos, :as box}]))}, :name coding-challenges.menger-sponge-fractal.box/draw, :variadic false, :file "src\\cljs\\coding_challenges\\menger-sponge-fractal\\box.cljs", :end-column 11, :method-params ([p__35513]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{r :r, {x :x, y :y, z :z} :pos, :as box}]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :r :pos :type :z Box :x}, :order [:type :pos :r Box :x :y :z]}, :doc nil}