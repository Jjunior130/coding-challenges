{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.solar-system-3d.planet, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {random-coordinate {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :line 4, :column 7, :end-line 4, :end-column 24, :arglists (quote ([distance]))}, :name coding-challenges.solar-system-3d.planet/random-coordinate, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :end-column 24, :method-params ([distance]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([distance]))}, make {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :line 19, :column 7, :end-line 19, :end-column 11, :arglists (quote ([r d o]))}, :name coding-challenges.solar-system-3d.planet/make, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :end-column 11, :method-params ([r d o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([r d o]))}, spawn-moons {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :line 27, :column 7, :end-line 27, :end-column 18, :arglists (quote ([total level {radius :radius, :as planet}]))}, :name coding-challenges.solar-system-3d.planet/spawn-moons, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :end-column 18, :method-params ([total level p__34808]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([total level {radius :radius, :as planet}]))}, orbit {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :line 49, :column 7, :end-line 49, :end-column 12, :arglists (quote ([{orbit-speed :orbit-speed, :as planet}]))}, :name coding-challenges.solar-system-3d.planet/orbit, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :end-column 12, :method-params ([p__34817]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{orbit-speed :orbit-speed, :as planet}]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :line 64, :column 7, :end-line 64, :end-column 14, :arglists (quote ([planet]))}, :name coding-challenges.solar-system-3d.planet/update*, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :end-column 14, :method-params ([planet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([planet]))}, cross {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :line 67, :column 7, :end-line 67, :end-column 12, :arglists (quote ([{x1 :x, y1 :y, z1 :z} {x2 :x, y2 :y, z2 :z}]))}, :name coding-challenges.solar-system-3d.planet/cross, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :end-column 12, :method-params ([p__34825 p__34826]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{x1 :x, y1 :y, z1 :z} {x2 :x, y2 :y, z2 :z}]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :line 77, :column 7, :end-line 77, :end-column 11, :arglists (quote ([{angle :angle, radius :radius, planets :planets, {vx :x, vy :y, vz :z, :as v} :v, :as planet}]))}, :name coding-challenges.solar-system-3d.planet/draw, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system-3d\\planet.cljs", :end-column 11, :method-params ([p__34835]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{angle :angle, radius :radius, planets :planets, {vx :x, vy :y, vz :z, :as v} :v, :as planet}]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :planets :v :type :angle :radius :z Planet :x :distance :orbit-speed}, :order [:x :y :z :type :radius :distance :angle :orbit-speed :v Planet :planets]}, :doc nil}