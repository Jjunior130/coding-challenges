{:rename-macros {}, :renames {}, :use-macros {multi-transform* com.rpl.specter, terminal com.rpl.specter, multi-path com.rpl.specter, terminal-val com.rpl.specter, STAY com.rpl.specter}, :excludes #{}, :name coding-challenges.util, :imports nil, :requires {sp com.rpl.specter, com.rpl.specter com.rpl.specter}, :uses {multi-transform* com.rpl.specter, terminal com.rpl.specter, multi-path com.rpl.specter, terminal-val com.rpl.specter, STAY com.rpl.specter}, :defs {update-val {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 6, :column 7, :end-line 6, :end-column 17, :arglists (quote ([p f]))}, :name coding-challenges.util/update-val, :variadic false, :file "src\\cljs\\coding_challenges\\util.cljs", :end-column 17, :method-params ([p f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p f]))}, multi {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([f]))}, :name coding-challenges.util/multi, :variadic false, :file "src\\cljs\\coding_challenges\\util.cljs", :end-column 12, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, u {:name coding-challenges.util/u, :file "src\\cljs\\coding_challenges\\util.cljs", :line 20, :column 1, :end-line 20, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 20, :column 6, :end-line 20, :end-column 7}, :doc "Applies fn to the navigated value(s).\n\nEven args call:\n Must be called inside a com.rpl.specter/multi-transform.\n Takes path<=>fn pairs as arguments.\n Returns a path.\nOdd args call:\n Takes a structure as first argument and path<=>fn pairs as rest.\n Returns the transformation of structure."}, assoc-val {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([p v]))}, :name coding-challenges.util/assoc-val, :variadic false, :file "src\\cljs\\coding_challenges\\util.cljs", :end-column 16, :method-params ([p v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p v]))}, a {:name coding-challenges.util/a, :file "src\\cljs\\coding_challenges\\util.cljs", :line 35, :column 1, :end-line 35, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 35, :column 6, :end-line 35, :end-column 7}, :doc "Replace the navigated value(s) with the given value(s).\n\nEven args call:\n Must be called inside a com.rpl.specter/multi-transform.\n Takes path<=>value pairs as arguments.\n Returns a path.\nOdd args call:\n Takes a structure as first argument and path<=>value pairs as rest.\n Returns the transformation of structure."}, mt {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 47, :column 7, :end-line 47, :end-column 9, :arglists (quote ([structure & paths])), :doc "Transform structure based on the given paths.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(structure paths)], :arglists ([structure & paths]), :arglists-meta (nil)}}, :name coding-challenges.util/mt, :variadic true, :file "src\\cljs\\coding_challenges\\util.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(structure paths)], :arglists ([structure & paths]), :arglists-meta (nil)}, :method-params [(structure paths)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists ([structure & paths]), :doc "Transform structure based on the given paths."}, cond->mt {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([structure & pairs])), :doc "Transform structure based on the given paths whose condition is truthy.\n\nActs like cond->>; Doesn't short circuit on first false.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(structure pairs)], :arglists ([structure & pairs]), :arglists-meta (nil)}}, :name coding-challenges.util/cond->mt, :variadic true, :file "src\\cljs\\coding_challenges\\util.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(structure pairs)], :arglists ([structure & pairs]), :arglists-meta (nil)}, :method-params [(structure pairs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([structure & pairs]), :doc "Transform structure based on the given paths whose condition is truthy.\n\nActs like cond->>; Doesn't short circuit on first false."}, cond-mt {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 66, :column 7, :end-line 66, :end-column 14, :arglists (quote ([structure & pairs])), :doc "Transform structure based on the first given paths whose condition is truthy.\n\nActs like cond; Short circuit after first true.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(structure pairs)], :arglists ([structure & pairs]), :arglists-meta (nil)}}, :name coding-challenges.util/cond-mt, :variadic true, :file "src\\cljs\\coding_challenges\\util.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(structure pairs)], :arglists ([structure & pairs]), :arglists-meta (nil)}, :method-params [(structure pairs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists ([structure & pairs]), :doc "Transform structure based on the first given paths whose condition is truthy.\n\nActs like cond; Short circuit after first true."}, PASS {:name coding-challenges.util/PASS, :file "src\\cljs\\coding_challenges\\util.cljs", :line 81, :column 1, :end-line 81, :end-column 10, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\util.cljs", :line 81, :column 6, :end-line 81, :end-column 10}}}, :require-macros {sp com.rpl.specter, com.rpl.specter com.rpl.specter}, :doc nil}