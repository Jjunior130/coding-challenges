{:rename-macros {}, :renames {}, :use-macros {setval com.rpl.specter, transform com.rpl.specter, putval com.rpl.specter, collect-one com.rpl.specter, ALL com.rpl.specter}, :excludes #{}, :name coding-challenges.solar-system.views, :imports nil, :requires {com.rpl.specter com.rpl.specter, reagent reagent.core, re-com.core re-com.core, q quil.core, reagent.core reagent.core, rf re-frame.core, rc re-com.core, sp com.rpl.specter, m quil.middleware, quil.core quil.core, quil.middleware quil.middleware, coding-challenges.solar-system.planet coding-challenges.solar-system.planet, planet coding-challenges.solar-system.planet, re-frame.core re-frame.core}, :uses {putval com.rpl.specter, collect-one com.rpl.specter, ALL com.rpl.specter}, :defs {w {:name coding-challenges.solar-system.views/w, :file "src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 12, :column 1, :end-line 12, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 12, :column 6, :end-line 12, :end-column 7}}, h {:name coding-challenges.solar-system.views/h, :file "src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 13, :column 1, :end-line 13, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 13, :column 6, :end-line 13, :end-column 7}}, setup {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 15, :column 7, :end-line 15, :end-column 12, :arglists (quote ([]))}, :name coding-challenges.solar-system.views/setup, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\views.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 19, :column 7, :end-line 19, :end-column 14, :arglists (quote ([sun]))}, :name coding-challenges.solar-system.views/update*, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\views.cljs", :end-column 14, :method-params ([sun]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sun]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 22, :column 7, :end-line 22, :end-column 11, :arglists (quote ([sun]))}, :name coding-challenges.solar-system.views/draw, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\views.cljs", :end-column 11, :method-params ([sun]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sun]))}, solar-system-sketch {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 28, :column 14, :end-line 28, :end-column 33, :export true, :arglists (quote ([]))}, :name coding-challenges.solar-system.views/solar-system-sketch, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\views.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, view {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\views.cljs", :line 37, :column 7, :end-line 37, :end-column 11, :arglists (quote ([]))}, :name coding-challenges.solar-system.views/view, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\views.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core, reagent reagent.core, reagent.core reagent.core, sp com.rpl.specter, com.rpl.specter com.rpl.specter}, :cljs.analyzer/constants {:seen #{:setval :children :solar-system :select-one :fn :sketch :pre :tabs :component-did-mount :width :canvas#solar-system :update :code.java :size :setup :middleware :planet :level :div :host :reagent-render :label :id :code :host-id :no-start :br :draw :on-change :level1 :code.clojure :height :model}, :order [:host :update :size :setup :middleware :no-start :draw :fn :host-id :reagent-render :component-did-mount :select-one :solar-system :code :div :label :level :level1 :br :canvas#solar-system :width :height :children :sketch :tabs :id :planet :model :on-change :setval :pre :code.clojure :code.java]}, :doc nil}