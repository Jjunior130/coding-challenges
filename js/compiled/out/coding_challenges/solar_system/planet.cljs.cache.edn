{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.solar-system.planet, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {make {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :line 4, :column 7, :end-line 4, :end-column 11, :arglists (quote ([r d o]))}, :name coding-challenges.solar-system.planet/make, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :end-column 11, :method-params ([r d o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 3, :fn-var true, :arglists (quote ([r d o]))}, spawn-moons {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :line 11, :column 7, :end-line 11, :end-column 18, :arglists (quote ([total level {radius :radius, :as planet}]))}, :name coding-challenges.solar-system.planet/spawn-moons, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :end-column 18, :method-params ([total level p__35395]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([total level {radius :radius, :as planet}]))}, orbit {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :line 30, :column 7, :end-line 30, :end-column 12, :arglists (quote ([{orbit-speed :orbit-speed, :as planet}]))}, :name coding-challenges.solar-system.planet/orbit, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :end-column 12, :method-params ([p__35404]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{orbit-speed :orbit-speed, :as planet}]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :line 45, :column 7, :end-line 45, :end-column 14, :arglists (quote ([planet]))}, :name coding-challenges.solar-system.planet/update*, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :end-column 14, :method-params ([planet]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([planet]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :line 48, :column 7, :end-line 48, :end-column 11, :arglists (quote ([{angle :angle, distance :distance, radius :radius, planets :planets, :as planet}]))}, :name coding-challenges.solar-system.planet/draw, :variadic false, :file "src\\cljs\\coding_challenges\\solar-system\\planet.cljs", :end-column 11, :method-params ([p__35412]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{angle :angle, distance :distance, radius :radius, planets :planets, :as planet}]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:planets :type :angle :radius Planet :distance :orbit-speed}, :order [:type :radius :distance :angle :orbit-speed Planet :planets]}, :doc nil}