{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.maze-generator.views, :imports nil, :requires {reagent reagent.core, cell coding-challenges.maze-generator.cell, re-com.core re-com.core, q quil.core, reagent.core reagent.core, rf re-frame.core, rc re-com.core, m quil.middleware, coding-challenges.maze-generator.cell coding-challenges.maze-generator.cell, quil.core quil.core, quil.middleware quil.middleware, re-frame.core re-frame.core}, :uses nil, :defs {w {:name coding-challenges.maze-generator.views/w, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 9, :column 1, :end-line 9, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 9, :column 6, :end-line 9, :end-column 7}}, h {:name coding-challenges.maze-generator.views/h, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 10, :column 1, :end-line 10, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 10, :column 6, :end-line 10, :end-column 7}}, setup {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 12, :column 7, :end-line 12, :end-column 12, :arglists (quote ([]))}, :name coding-challenges.maze-generator.views/setup, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-walls {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 44, :column 7, :end-line 44, :end-column 19, :arglists (quote ([grid {ci :i, cj :j} previous-wall {ni :i, nj :j} next-wall]))}, :name coding-challenges.maze-generator.views/remove-walls, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :end-column 19, :method-params ([grid p__35105 previous-wall p__35106 next-wall]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 5, :fn-var true, :arglists (quote ([grid {ci :i, cj :j} previous-wall {ni :i, nj :j} next-wall]))}, remove-wall {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 63, :column 7, :end-line 63, :end-column 18, :arglists (quote ([grid {ci :i, cj :j, :as previous-current} {ni :i, nj :j, :as next-current}]))}, :name coding-challenges.maze-generator.views/remove-wall, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :end-column 18, :method-params ([grid p__35115 p__35116]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid {ci :i, cj :j, :as previous-current} {ni :i, nj :j, :as next-current}]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 86, :column 7, :end-line 86, :end-column 14, :arglists (quote ([{grid :grid, stack :stack, {ci :i, cj :j, :as previous-current} :current, :as sketch}]))}, :name coding-challenges.maze-generator.views/update*, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :end-column 14, :method-params ([p__35129]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{grid :grid, stack :stack, {ci :i, cj :j, :as previous-current} :current, :as sketch}]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 119, :column 7, :end-line 119, :end-column 11, :arglists (quote ([{grid :grid, w :w, {ci :i, cj :j} :current, :as sketch}]))}, :name coding-challenges.maze-generator.views/draw, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :end-column 11, :method-params ([p__35142]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{grid :grid, w :w, {ci :i, cj :j} :current, :as sketch}]))}, maze-generator-sketch {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 129, :column 14, :end-line 129, :end-column 35, :export true, :arglists (quote ([]))}, :name coding-challenges.maze-generator.views/maze-generator-sketch, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :end-column 35, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, view {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :line 138, :column 7, :end-line 138, :end-column 11, :arglists (quote ([]))}, :name coding-challenges.maze-generator.views/view, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\views.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:canvas#maze-generator :setval :children :align :select-one :fn :sketch :pre :bottom :tabs :top :grid :w :component-did-mount :width :update :maze-generator :visited :walls :size :center :setup :middleware :level :rows :host :cols :code.javascript :reagent-render :j :label :id :current :code :stack :right :host-id :no-start :draw :on-change :cell :level1 :i :code.clojure :height :left :model}, :order [:visited :w :cols :rows :grid :current :i :j :walls :left :right :top :bottom :stack :host :update :size :setup :middleware :no-start :draw :fn :host-id :reagent-render :component-did-mount :select-one :maze-generator :code :align :center :children :sketch :label :level :level1 :canvas#maze-generator :width :height :tabs :id :cell :model :on-change :setval :pre :code.clojure :code.javascript]}, :doc nil}