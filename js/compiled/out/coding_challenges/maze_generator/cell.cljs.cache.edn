{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.maze-generator.cell, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {make {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :line 4, :column 7, :end-line 4, :end-column 11, :arglists (quote ([i j]))}, :name coding-challenges.maze-generator.cell/make, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :end-column 11, :method-params ([i j]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i j]))}, index {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :line 10, :column 7, :end-line 10, :end-column 12, :arglists (quote ([grid i j]))}, :name coding-challenges.maze-generator.cell/index, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :end-column 12, :method-params ([grid i j]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid i j]))}, check-neighbors {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :line 13, :column 7, :end-line 13, :end-column 22, :arglists (quote ([grid {ci :i, cj :j}]))}, :name coding-challenges.maze-generator.cell/check-neighbors, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :end-column 22, :method-params ([grid p__35050]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([grid {ci :i, cj :j}]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :line 37, :column 7, :end-line 37, :end-column 14, :arglists (quote ([cell]))}, :name coding-challenges.maze-generator.cell/update*, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :end-column 14, :method-params ([cell]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cell]))}, highlight {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :line 39, :column 7, :end-line 39, :end-column 16, :arglists (quote ([w {i :i, j :j, :as cell}]))}, :name coding-challenges.maze-generator.cell/highlight, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :end-column 16, :method-params ([w p__35073]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w {i :i, j :j, :as cell}]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :line 48, :column 7, :end-line 48, :end-column 11, :arglists (quote ([w {i :i, j :j, walls :walls, visited? :visited, :as cell}]))}, :name coding-challenges.maze-generator.cell/draw, :variadic false, :file "src\\cljs\\coding_challenges\\maze-generator\\cell.cljs", :end-column 11, :method-params ([w p__35078]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w {i :i, j :j, walls :walls, visited? :visited, :as cell}]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:bottom :top :type :visited :walls :j :right Cell :i :left}, :order [:type :i :j :walls Cell :bottom :top :right :left :visited]}, :doc nil}