{:rename-macros {}, :renames {}, :use-macros {setval com.rpl.specter, transform com.rpl.specter, view com.rpl.specter, putval com.rpl.specter, collect-one com.rpl.specter, ALL com.rpl.specter}, :excludes #{}, :name coding-challenges.space-invaders.drop, :imports nil, :requires {q quil.core, quil.core quil.core, sp com.rpl.specter, com.rpl.specter com.rpl.specter}, :uses {view com.rpl.specter, putval com.rpl.specter, collect-one com.rpl.specter, ALL com.rpl.specter}, :defs {make {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([x y]))}, :name coding-challenges.space-invaders.drop/make, :variadic false, :file "src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :end-column 11, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, move-up {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :line 13, :column 7, :end-line 13, :end-column 14, :arglists (quote ([d]))}, :name coding-challenges.space-invaders.drop/move-up, :variadic false, :file "src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :end-column 14, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, pathcache35031 {:name coding-challenges.space-invaders.drop/pathcache35031, :cljs.analyzer/no-resolve true, :no-doc true, :meta {:cljs.analyzer/no-resolve true, :no-doc true, :file nil}, :file "src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :line 15, :column 7}, pathcache35034 {:name coding-challenges.space-invaders.drop/pathcache35034, :cljs.analyzer/no-resolve true, :no-doc true, :meta {:cljs.analyzer/no-resolve true, :no-doc true, :file nil}, :file "src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :line 15, :column 7}, hits? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([{dx :x, dy :y, dr :r, :as d} {fx :x, fy :y, fr :r, :as flower}]))}, :name coding-challenges.space-invaders.drop/hits?, :variadic false, :file "src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :end-column 12, :method-params ([p__35037 p__35038]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{dx :x, dy :y, dr :r, :as d} {fx :x, fy :y, fr :r, :as flower}]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :line 29, :column 7, :end-line 29, :end-column 14, :arglists (quote ([d]))}, :name coding-challenges.space-invaders.drop/update*, :variadic false, :file "src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :end-column 14, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :line 32, :column 7, :end-line 32, :end-column 11, :arglists (quote ([{dx :x, dy :y, dr :r, :as d}]))}, :name coding-challenges.space-invaders.drop/draw, :variadic false, :file "src\\cljs\\coding_challenges\\space-invaders\\drop.cljs", :end-column 11, :method-params ([p__35047]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{dx :x, dy :y, dr :r, :as d}]))}}, :require-macros {q quil.core, quil.core quil.core, sp com.rpl.specter, com.rpl.specter com.rpl.specter}, :cljs.analyzer/constants {:seen #{:y :r :type Drop :x}, :order [:type :x :y :r Drop]}, :doc nil}