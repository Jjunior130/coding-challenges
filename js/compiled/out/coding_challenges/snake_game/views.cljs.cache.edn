{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.snake-game.views, :imports nil, :requires {reagent reagent.core, re-com.core re-com.core, q quil.core, reagent.core reagent.core, rf re-frame.core, rc re-com.core, snake coding-challenges.snake-game.snake, coding-challenges.snake-game.snake coding-challenges.snake-game.snake, m quil.middleware, quil.core quil.core, quil.middleware quil.middleware, re-frame.core re-frame.core}, :uses {eat? coding-challenges.snake-game.snake}, :defs {draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 47, :column 7, :end-line 47, :end-column 11, :arglists (quote ([{{x :x, y :y} :food, snake :snake, scl :scale, :as sketch}]))}, :name coding-challenges.snake-game.views/draw, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 11, :method-params ([p__35662]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{{x :x, y :y} :food, snake :snake, scl :scale, :as sketch}]))}, snake-game-sketch {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 122, :column 14, :end-line 122, :end-column 31, :export true, :arglists (quote ([]))}, :name coding-challenges.snake-game.views/snake-game-sketch, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, view {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 133, :column 7, :end-line 133, :end-column 11, :arglists (quote ([]))}, :name coding-challenges.snake-game.views/view, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mouse-clicked {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 118, :column 7, :end-line 118, :end-column 20, :arglists (quote ([sketch event]))}, :name coding-challenges.snake-game.views/mouse-clicked, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 20, :method-params ([sketch event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sketch event]))}, pick-location {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 13, :column 7, :end-line 13, :end-column 20, :arglists (quote ([scl]))}, :name coding-challenges.snake-game.views/pick-location, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 20, :method-params ([scl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([scl]))}, w {:name coding-challenges.snake-game.views/w, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 10, :column 1, :end-line 10, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 10, :column 6, :end-line 10, :end-column 7}}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 42, :column 7, :end-line 42, :end-column 14, :arglists (quote ([sketch]))}, :name coding-challenges.snake-game.views/update*, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 14, :method-params ([sketch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sketch]))}, update-food {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 33, :column 7, :end-line 33, :end-column 18, :arglists (quote ([{scl :scale, snake :snake, :as sketch}]))}, :name coding-challenges.snake-game.views/update-food, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 18, :method-params ([p__35657]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{scl :scale, snake :snake, :as sketch}]))}, turn-snake? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 59, :column 7, :end-line 59, :end-column 18, :arglists (quote ([nxd nyd {scl :scale, :as sketch}])), :doc "Change direction only if next position doesn't result in death."}, :name coding-challenges.snake-game.views/turn-snake?, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 18, :method-params ([nxd nyd p__35671]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nxd nyd {scl :scale, :as sketch}])), :doc "Change direction only if next position doesn't result in death."}, setup {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 20, :column 7, :end-line 20, :end-column 12, :arglists (quote ([]))}, :name coding-challenges.snake-game.views/setup, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, increase-snake-tail {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 103, :column 7, :end-line 103, :end-column 26, :arglists (quote ([{scl :scale, {sx :x, sy :y, sxv :xspeed, syv :yspeed} :snake, :as sketch}]))}, :name coding-challenges.snake-game.views/increase-snake-tail, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 26, :method-params ([p__35682]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{scl :scale, {sx :x, sy :y, sxv :xspeed, syv :yspeed} :snake, :as sketch}]))}, update-snake {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([{scl :scale, food :food, :as sketch}]))}, :name coding-challenges.snake-game.views/update-snake, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 19, :method-params ([p__35652]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{scl :scale, food :food, :as sketch}]))}, h {:name coding-challenges.snake-game.views/h, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 11, :column 1, :end-line 11, :end-column 7, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 11, :column 6, :end-line 11, :end-column 7}}, key-pressed {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\views.cljs", :line 83, :column 7, :end-line 83, :end-column 18, :arglists (quote ([sketch event]))}, :name coding-challenges.snake-game.views/key-pressed, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\views.cljs", :end-column 18, :method-params ([sketch event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sketch event]))}}, :require-macros {q quil.core, quil.core quil.core, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :snake-game :setval :down :children :align :mouse-clicked :select-one :fn :sketch :pre :key :snake :else :tabs :scale :w :component-did-mount :width :type :update :s :up :size :center :setup :middleware :level :host :food :code.javascript Food :canvas#snake-game :reagent-render :key-pressed :tail :label :id :code :xspeed :right :host-id :no-start :d :x :draw :on-change :level1 :code.clojure :a :height :left :yspeed :model}, :order [:type :x :y Food :snake :scale :food :xspeed :yspeed :tail :key :up :w :down :s :left :a :right :d :else :mouse-clicked :update :size :setup :middleware :host :key-pressed :no-start :draw :fn :host-id :reagent-render :component-did-mount :select-one :snake-game :code :align :center :children :sketch :label :level :level1 :canvas#snake-game :width :height :tabs :id :model :on-change :setval :pre :code.clojure :code.javascript]}, :doc nil}