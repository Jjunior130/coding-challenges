{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.snake-game.snake, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {make {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 4, :column 7, :end-line 4, :end-column 11, :arglists (quote ([] [x y xv yv])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([] [x y xv yv]), :arglists ([] [x y xv yv]), :arglists-meta (nil nil)}}, :name coding-challenges.snake-game.snake/make, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([] [x y xv yv]), :arglists ([] [x y xv yv]), :arglists-meta (nil nil)}, :method-params ([] [x y xv yv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 4, :fn-var true, :arglists ([] [x y xv yv])}, eat? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 15, :column 7, :end-line 15, :end-column 11, :arglists (quote ([{fx :x, fy :y, :as food} {sx :x, sy :y, :as snake}]))}, :name coding-challenges.snake-game.snake/eat?, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 11, :method-params ([p__35594 p__35595]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{fx :x, fy :y, :as food} {sx :x, sy :y, :as snake}]))}, death? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 25, :column 7, :end-line 25, :end-column 13, :arglists (quote ([tail x y]))}, :name coding-challenges.snake-game.snake/death?, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 13, :method-params ([tail x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tail x y]))}, update-tail {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 28, :column 7, :end-line 28, :end-column 18, :arglists (quote ([scl food {sx :x, sy :y, sxv :xspeed, syv :yspeed, :as snake}]))}, :name coding-challenges.snake-game.snake/update-tail, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 18, :method-params ([scl food p__35604]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 3, :fn-var true, :arglists (quote ([scl food {sx :x, sy :y, sxv :xspeed, syv :yspeed, :as snake}]))}, move-forward {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([scl {xspeed :xspeed, yspeed :yspeed, :as snake}]))}, :name coding-challenges.snake-game.snake/move-forward, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 19, :method-params ([scl p__35611]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([scl {xspeed :xspeed, yspeed :yspeed, :as snake}]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 57, :column 7, :end-line 57, :end-column 14, :arglists (quote ([scl food snake]))}, :name coding-challenges.snake-game.snake/update*, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 14, :method-params ([scl food snake]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 3, :fn-var true, :arglists (quote ([scl food snake]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 62, :column 7, :end-line 62, :end-column 11, :arglists (quote ([scl {sx :x, sy :y, tail :tail, :as snake}]))}, :name coding-challenges.snake-game.snake/draw, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 11, :method-params ([scl p__35616]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([scl {sx :x, sy :y, tail :tail, :as snake}]))}, dir {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :line 72, :column 7, :end-line 72, :end-column 10, :arglists (quote ([x y snake]))}, :name coding-challenges.snake-game.snake/dir, :variadic false, :file "src\\cljs\\coding_challenges\\snake-game\\snake.cljs", :end-column 10, :method-params ([x y snake]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y snake]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :else :type :tail :xspeed :x Snake :yspeed}, :order [:type :x :y :xspeed :yspeed :tail Snake :else]}, :doc nil}