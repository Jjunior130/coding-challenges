{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.core, :imports nil, :requires {coding-challenges.subs coding-challenges.subs, reagent reagent.core, coding-challenges.views coding-challenges.views, views coding-challenges.views, reagent.core reagent.core, routes coding-challenges.routes, coding-challenges.events coding-challenges.events, config coding-challenges.config, re-frisk.core re-frisk.core, coding-challenges.config coding-challenges.config, coding-challenges.routes coding-challenges.routes, re-frame re-frame.core, re-frame.core re-frame.core}, :uses {enable-re-frisk! re-frisk.core}, :defs {dev-setup {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\core.cljs", :line 12, :column 7, :end-line 12, :end-column 16, :arglists (quote ([]))}, :name coding-challenges.core/dev-setup, :variadic false, :file "src\\cljs\\coding_challenges\\core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mount-root {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\core.cljs", :line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([]))}, :name coding-challenges.core/mount-root, :variadic false, :file "src\\cljs\\coding_challenges\\core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\core.cljs", :line 23, :column 16, :end-line 23, :end-column 20, :export true, :arglists (quote ([]))}, :name coding-challenges.core/init, :variadic false, :file "src\\cljs\\coding_challenges\\core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:initialize-db}, :order [:initialize-db]}, :doc nil}