{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name coding-challenges.starfield.star, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {make {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :line 4, :column 7, :end-line 4, :end-column 11, :arglists (quote ([]))}, :name coding-challenges.starfield.star/make, :variadic false, :file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, move-forward {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :line 10, :column 7, :end-line 10, :end-column 19, :arglists (quote ([speed {z :z, :as star}]))}, :name coding-challenges.starfield.star/move-forward, :variadic false, :file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :end-column 19, :method-params ([speed p__34584]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([speed {z :z, :as star}]))}, reset? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :line 16, :column 7, :end-line 16, :end-column 13, :arglists (quote ([{z :z, :as star}]))}, :name coding-challenges.starfield.star/reset?, :variadic false, :file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :end-column 13, :method-params ([p__34589]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{z :z, :as star}]))}, update* {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :line 28, :column 7, :end-line 28, :end-column 14, :arglists (quote ([speed star]))}, :name coding-challenges.starfield.star/update*, :variadic false, :file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :end-column 14, :method-params ([speed star]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([speed star]))}, draw {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :line 33, :column 7, :end-line 33, :end-column 11, :arglists (quote ([{x :x, y :y, z :z, pz :pz, :as star}]))}, :name coding-challenges.starfield.star/draw, :variadic false, :file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\src\\cljs\\coding_challenges\\starfield\\star.cljs", :end-column 11, :method-params ([p__34596]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{x :x, y :y, z :z, pz :pz, :as star}]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y Star :type :z :x :pz}, :order [:type :x :y :z Star :pz]}, :doc nil}