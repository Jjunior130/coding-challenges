{:rename-macros {}, :renames {}, :use-macros {compile-if taoensso.truss.impl, -invar taoensso.truss.impl, catching taoensso.truss.impl}, :excludes #{some?}, :name taoensso.truss.impl, :imports nil, :requires {set clojure.set, clojure.set clojure.set}, :uses nil, :defs {set* {:name taoensso.truss.impl/set*, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 49, :column 3, :end-line 49, :end-column 13, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 49, :column 9, :end-line 49, :end-column 13}}, -xpred {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 83, :column 7, :end-line 83, :end-column 13, :arglists (quote ([pred])), :doc "Expands any special predicate forms and returns [<expanded-pred> <non-throwing?>]"}, :name taoensso.truss.impl/-xpred, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 13, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred])), :doc "Expands any special predicate forms and returns [<expanded-pred> <non-throwing?>]"}, -invar-violation! {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 152, :column 7, :end-line 152, :end-column 24, :arglists (quote ([elidable? ns-str ?line form val ?err ?data-fn]))}, :name taoensso.truss.impl/-invar-violation!, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 24, :method-params ([elidable? ns-str ?line form val ?err ?data-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 7, :fn-var true, :arglists (quote ([elidable? ns-str ?line form val ?err ?data-fn]))}, some? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 42, :column 23, :end-line 42, :end-column 28, :tag boolean, :arglists (quote ([x]))}, :name taoensso.truss.impl/some?, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 42, :ret-tag boolean, :end-line 42, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, non-throwing? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 68, :column 8, :end-line 68, :end-column 21, :private true, :arglists (quote ([p])), :doc "Returns true for some common preds that are naturally non-throwing"}, :private true, :name taoensso.truss.impl/non-throwing?, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 21, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true for some common preds that are naturally non-throwing"}, default-error-fn {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 60, :column 7, :end-line 60, :end-column 23, :arglists (quote ([data_]))}, :name taoensso.truss.impl/default-error-fn, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 23, :method-params ([data_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data_]))}, *?data* {:name taoensso.truss.impl/*?data*, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 64, :column 1, :end-line 64, :end-column 23, :dynamic true, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 64, :column 16, :end-line 64, :end-column 23, :dynamic true}}, fmt-err-msg {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 144, :column 8, :end-line 144, :end-column 19, :private true, :arglists (quote ([x1 x2 x3 x4]))}, :private true, :name taoensso.truss.impl/fmt-err-msg, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 19, :method-params ([x1 x2 x3 x4]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x1 x2 x3 x4]))}, ks-nnil? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 56, :column 40, :end-line 56, :end-column 48, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.truss.impl/ks-nnil?, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 48, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 56, :ret-tag boolean, :end-line 56, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}, -dummy-error {:name taoensso.truss.impl/-dummy-error, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 151, :column 1, :end-line 151, :end-column 19, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 151, :column 7, :end-line 151, :end-column 19}}, -dummy-val {:name taoensso.truss.impl/-dummy-val, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 150, :column 1, :end-line 150, :end-column 17, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 150, :column 7, :end-line 150, :end-column 17}}, revery? {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([pred coll]))}, :name taoensso.truss.impl/revery?, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 14, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, ->WrappedError {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 148, :column 10, :end-line 148, :end-column 22, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([val]))}, :protocols #{}, :name taoensso.truss.impl/->WrappedError, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 22, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :skip-protocol-flag nil}, rsome {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 39, :column 7, :end-line 39, :end-column 12, :arglists (quote ([pred coll]))}, :name taoensso.truss.impl/rsome, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 12, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, ks<= {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 54, :column 40, :end-line 54, :end-column 44, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.truss.impl/ks<=, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 44, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 54, :ret-tag boolean, :end-line 54, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}, -assertion-error {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 149, :column 7, :end-line 149, :end-column 23, :arglists (quote ([msg]))}, :name taoensso.truss.impl/-assertion-error, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 23, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, ks= {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 53, :column 40, :end-line 53, :end-column 43, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.truss.impl/ks=, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 43, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 53, :ret-tag boolean, :end-line 53, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}, *error-fn* {:name taoensso.truss.impl/*error-fn*, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 65, :column 1, :end-line 65, :end-column 26, :dynamic true, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 65, :column 16, :end-line 65, :end-column 26, :dynamic true}}, WrappedError {:num-fields 1, :protocols #{}, :name taoensso.truss.impl/WrappedError, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 22, :type true, :column 10, :line 148, :record false, :end-line 148, :skip-protocol-flag nil}, non-throwing {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 67, :column 8, :end-line 67, :end-column 20, :arglists (quote ([pred]))}, :name taoensso.truss.impl/non-throwing, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 20, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred]))}, ks>= {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\coding-challenges\\resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :line 55, :column 40, :end-line 55, :end-column 44, :tag boolean, :arglists (quote ([ks m]))}, :name taoensso.truss.impl/ks>=, :variadic false, :file "resources\\public\\js\\compiled\\out\\taoensso\\truss\\impl.cljs", :end-column 44, :method-params ([ks m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 55, :ret-tag boolean, :end-line 55, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([ks m]))}}, :require-macros {impl-macros taoensso.truss.impl, taoensso.truss.impl taoensso.truss.impl}, :cljs.analyzer/constants {:seen #{x :*?data* taoensso.truss.impl/set* cljs.core/= :else :msg_ :elidable? :dt taoensso.truss.impl/ks= :val :ns-str taoensso.truss.impl/ks-nnil? cljs.core/contains? taoensso.truss.impl/ks<= taoensso.truss.impl/non-throwing :val-type val :?err :*assert* :data-error clojure.set/superset? undefined/threw-error cljs.core/fn clojure.set/subset? :?data :?line cljs.core/not cljs.core/and :form-str taoensso.truss.impl/ks>= cljs.core/or}, :order [:msg_ :else cljs.core/fn x cljs.core/contains? taoensso.truss.impl/set* taoensso.truss.impl/ks-nnil? taoensso.truss.impl/ks<= taoensso.truss.impl/ks= taoensso.truss.impl/ks>= cljs.core/not clojure.set/subset? clojure.set/superset? cljs.core/= taoensso.truss.impl/non-throwing cljs.core/and cljs.core/or val :data-error :*?data* :elidable? :dt :val :ns-str :val-type :?err :*assert* :?data :?line :form-str undefined/threw-error]}, :doc "Private implementation details"}